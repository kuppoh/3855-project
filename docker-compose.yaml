services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "22181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    networks:
      - my_network
    
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    command: [start-kafka.sh]
    ports:
      - "29092:29092"  
      - "9092:9092"   
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - ./data/kafka:/kafka
    depends_on:
      zookeeper: 
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:29092"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    networks:
      - my_network

  db:
    image: mysql:latest
    container_name: mysql
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: 1
      MYSQL_USER: 'keziah'
      MYSQL_PASSWORD: 'password123'
      MYSQL_DATABASE: 'real_estate'
    ports:
      - "3306:3306"
    volumes:
      - ./data/database:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    networks:
      - my_network

  receiver:
    build:
      context: receiver
      dockerfile: Dockerfile
    container_name: receiver
    depends_on:
      kafka:
        condition: service_healthy
      storage:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - ./config/receiver/app_conf.yaml:/app/config/receiver/app_conf.yaml
      - ./config/log_conf.yaml:/app/config/log_conf.yaml
      - ./logs/:/app/logs/
    user: nobody
    networks:
      - my_network

  storage:
    build:
      context: storage
      dockerfile: Dockerfile
    container_name: storage
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - ./config/storage/app_conf.yaml:/app/config/storage/app_conf.yaml
      - ./config/log_conf.yaml:/app/config/log_conf.yaml
      - ./logs/:/app/logs/
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/ui/"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    user: root
    networks:
      - my_network

  processing:
    build:
      context: processing
      dockerfile: Dockerfile
    container_name: processing
    depends_on:
      storage:
        condition: service_healthy
    ports:
      - "8100:8100"
    volumes:
      - ./config/processing/app_conf.yaml:/app/config/processing/app_conf.yaml
      - ./config/log_conf.yaml:/app/config/log_conf.yaml
      - ./logs/:/app/logs/
      - ./data/processing:/app/data/processing/
    user: nobody
    networks:
      - my_network

  analyzer:
    build:
      context: analyzer
      dockerfile: Dockerfile
    container_name: analyzer
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8200:8200"
    volumes:
      - ./config/analyzer/app_conf.yaml:/app/config/analyzer/app_conf.yaml
      - ./config/log_conf.yaml:/app/config/log_conf.yaml
      - ./logs/:/app/logs/
    user: nobody
    networks:
      - my_network

networks:
  my_network:
    driver: bridge


volumes:
  zookeeper_data:
