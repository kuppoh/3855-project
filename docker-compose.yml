services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    # ports:
    #   - "22181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    healthcheck:
      test: ["CMD-SHELL", "echo mntr | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - my_network
    
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    # ports:
    #   - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - ./data/kafka:/kafka
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - my_network

  db:
    image: mysql:latest
    container_name: mysql
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: 1
      MYSQL_USER: 'keziah'
      MYSQL_PASSWORD: 'password123'
      MYSQL_DATABASE: 'real_estate'
    # ports:
    #   - "3306:3306"
    volumes:
      - ./data/database:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    networks:
      - my_network

  nginx:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nginx
    ports: 
      - "80:80"
    depends_on: 
      - processing
      - analyzer 
    networks:
      - my_network

  receiver:
    build:
      context: receiver
      dockerfile: Dockerfile
    container_name: receiver
    depends_on:
      kafka:
        condition: service_healthy
      storage:
        condition: service_healthy
    # ports:
    #   - "8080:8080"
    volumes:
      - ./config/receiver/app_conf.yaml:/app/config/receiver/app_conf.yaml
      - ./config/log_conf.yaml:/app/config/log_conf.yaml
      - ./logs/:/app/logs/
    user: nobody
    networks:
      - my_network

  storage:
    build:
      context: storage
      dockerfile: Dockerfile
    container_name: storage
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - ./config/storage/app_conf.yaml:/app/config/storage/app_conf.yaml
      - ./config/log_conf.yaml:/app/config/log_conf.yaml
      - ./logs/:/app/logs/
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/storage/ui/"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    user: nobody
    networks:
      - my_network

  processing:
    build:
      context: processing
      dockerfile: Dockerfile
    container_name: processing
    depends_on:
      storage:
        condition: service_healthy
    # ports:
    #   - "8100:8100"
    volumes:
      - ./config/processing/app_conf.yaml:/app/config/processing/app_conf.yaml
      - ./config/log_conf.yaml:/app/config/log_conf.yaml
      - ./logs/:/app/logs/
      - ./data/processing:/app/data/processing/
    user: nobody
    environment:
      CORS_ALLOW_ALL: yes
    networks:
      - my_network

  analyzer:
    build:
      context: analyzer
      dockerfile: Dockerfile
    container_name: analyzer
    depends_on:
      kafka:
        condition: service_healthy
    # ports:
    #   - "8200:8200"
    volumes:
      - ./config/analyzer/app_conf.yaml:/app/config/analyzer/app_conf.yaml
      - ./config/log_conf.yaml:/app/config/log_conf.yaml
      - ./logs/:/app/logs/
    user: nobody
    environment:
      CORS_ALLOW_ALL: yes
    networks:
      - my_network

networks:
  my_network:
    driver: bridge


volumes:
  zookeeper_data:
